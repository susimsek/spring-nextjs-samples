name: Build, Test, and Publish Application

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  desktop-build:
    name: Desktop macOS Build
    runs-on: macos-latest
    permissions:
      contents: write
      packages: write
    env:
      NODE_VERSION: 21.6.0
    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 21.6.0
          cache: 'npm'
          cache-dependency-path: src/main/desktop/package-lock.json

      # Install Node.js dependencies for the desktop application
      - name: Install Node.js Packages
        working-directory: src/main/desktop
        run: npm install

      # Build the desktop application
      - name: Build Desktop Application
        working-directory: src/main/desktop
        run: npm run build

  #      # Publish the desktop application to GitHub Releases
  #      - name: Publish Desktop Application
  #        working-directory: src/main/desktop
  #        run: npm run publish
  #        env:
  #          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  backend-build:
    name: Backend Build
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    permissions:
      contents: write
      packages: write
    env:
      NODE_VERSION: 21.6.0
      SPRING_OUTPUT_ANSI_ENABLED: DETECT
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        java-version: [ '21' ]
        include:
          - os: ubuntu-latest
            executable-suffix: ''
            native-build-args: --verbose -J-Xmx10g
          - os: macos-latest
            executable-suffix: ''
            native-build-args: --verbose -J-Xmx13g
    steps:
      # Set up swap space for Linux
      - name: Set up swap space
        if: runner.os == 'Linux'
        uses: pierotofy/set-swap-space@v1.0
        with:
          swap-size-gb: 10

      # Set up Docker for macOS
      - name: 'SETUP: docker'
        run: |
          HOMEBREW_NO_AUTO_UPDATE=1 brew install --cask docker
          open -a /Applications/Docker.app --args --unattended --accept-license
          #echo "We are waiting for Docker to be up and running. It can take over 2 minutes..."
          #while ! /Applications/Docker.app/Contents/Resources/bin/docker info &>/dev/null; do sleep 1; done
        if: runner.os == 'macOS'

      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up Node 21
      - name: Set up Node 21
        uses: actions/setup-node@v4
        with:
          node-version: 21.6.0
          cache: 'npm'
          cache-dependency-path: src/main/webapp/package-lock.json

      # Set up Java Development Kit (JDK) and GraalVM
      - name: Set up GraalVM (Java ${{ matrix.java-version }})
        uses: graalvm/setup-graalvm@v1
        with:
          distribution: 'liberica'
          version: '22.3.0'
          java-version: '${{ matrix.java-version }}'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: 'maven'

      # Configure Maven settings for GitHub Packages
      - name: Configure Maven for GitHub Packages
        run: |
          mkdir -p ~/.m2
          echo '<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
                  <servers>
                    <server>
                      <id>github</id>
                      <username>${{ github.actor }}</username>
                      <password>${{ secrets.GITHUB_TOKEN }}</password>
                    </server>
                  </servers>
                </settings>' > ~/.m2/settings.xml

      # Install Node.js dependencies for the web application
      - name: Install Node.js Packages for WebApp
        working-directory: src/main/webapp
        run: npm install

      # Download all required dependencies for Maven
      - name: Download Dependencies
        run: mvn -ntp dependency:go-offline

      # Run unit and integration tests for the backend
      - name: Run Tests
        run: mvn -ntp -Dskip.installnodenpm -Dskip.npm verify --batch-mode

      # Perform quality analysis using SonarQube
      - name: Run Quality Analysis
        run: mvn -ntp -Psonar initialize sonar:sonar -Dsonar.token=${{ secrets.SONAR_TOKEN }}

      # Deploy the backend application to GitHub Packages
      - name: Deploy to GitHub Packages
        run: mvn deploy -Pprod -Dgpg.skip -Dgithub -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Build Docker image
      - name: Build Docker Image
        run: |
          mvn -ntp -Pprod jib:build \
            -DskipTests \
            -Djib.to.auth.username=${{ secrets.DOCKER_USERNAME }} \
            -Djib.to.auth.password=${{ secrets.DOCKER_PASSWORD }} \
            -Djib.to.image=docker.io/${{ secrets.DOCKER_USERNAME }}/spring-nextjs-app:${{ github.ref_name }}

      # Build native Docker image
      - name: Build Native Docker Image
        run: |
          mvn -ntp -Pnative,prod spring-boot:build-image \
            -DskipTests \
            -Dspring-boot.build-image.publish=true \
            -Ddocker.publish.username=${{ secrets.DOCKER_USERNAME }} \
            -Ddocker.publish.password=${{ secrets.DOCKER_PASSWORD }} \
            -Dspring-boot.build-image.imageName=docker.io/${{ secrets.DOCKER_USERNAME }}/spring-nextjs-app:${{ github.ref_name }}-native \
           "-Dnative-build-args=${{ matrix.native-build-args }}"
